// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: person_management_service.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PersonManagementClient is the client API for PersonManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonManagementClient interface {
	Create(ctx context.Context, in *CreatePersonRequest, opts ...grpc.CallOption) (*PersonBaseResponse, error)
	Get(ctx context.Context, in *GetPersonRequest, opts ...grpc.CallOption) (*PersonBaseResponse, error)
	List(ctx context.Context, in *ListPersonRequest, opts ...grpc.CallOption) (*ListPersonResponse, error)
	Update(ctx context.Context, in *UpdatePersonRequest, opts ...grpc.CallOption) (*PersonBaseResponse, error)
	Delete(ctx context.Context, in *DeletePersonRequest, opts ...grpc.CallOption) (*DeletePersonResponse, error)
}

type personManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonManagementClient(cc grpc.ClientConnInterface) PersonManagementClient {
	return &personManagementClient{cc}
}

func (c *personManagementClient) Create(ctx context.Context, in *CreatePersonRequest, opts ...grpc.CallOption) (*PersonBaseResponse, error) {
	out := new(PersonBaseResponse)
	err := c.cc.Invoke(ctx, "/proto.PersonManagement/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personManagementClient) Get(ctx context.Context, in *GetPersonRequest, opts ...grpc.CallOption) (*PersonBaseResponse, error) {
	out := new(PersonBaseResponse)
	err := c.cc.Invoke(ctx, "/proto.PersonManagement/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personManagementClient) List(ctx context.Context, in *ListPersonRequest, opts ...grpc.CallOption) (*ListPersonResponse, error) {
	out := new(ListPersonResponse)
	err := c.cc.Invoke(ctx, "/proto.PersonManagement/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personManagementClient) Update(ctx context.Context, in *UpdatePersonRequest, opts ...grpc.CallOption) (*PersonBaseResponse, error) {
	out := new(PersonBaseResponse)
	err := c.cc.Invoke(ctx, "/proto.PersonManagement/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personManagementClient) Delete(ctx context.Context, in *DeletePersonRequest, opts ...grpc.CallOption) (*DeletePersonResponse, error) {
	out := new(DeletePersonResponse)
	err := c.cc.Invoke(ctx, "/proto.PersonManagement/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonManagementServer is the server API for PersonManagement service.
// All implementations should embed UnimplementedPersonManagementServer
// for forward compatibility
type PersonManagementServer interface {
	Create(context.Context, *CreatePersonRequest) (*PersonBaseResponse, error)
	Get(context.Context, *GetPersonRequest) (*PersonBaseResponse, error)
	List(context.Context, *ListPersonRequest) (*ListPersonResponse, error)
	Update(context.Context, *UpdatePersonRequest) (*PersonBaseResponse, error)
	Delete(context.Context, *DeletePersonRequest) (*DeletePersonResponse, error)
}

// UnimplementedPersonManagementServer should be embedded to have forward compatible implementations.
type UnimplementedPersonManagementServer struct {
}

func (UnimplementedPersonManagementServer) Create(context.Context, *CreatePersonRequest) (*PersonBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPersonManagementServer) Get(context.Context, *GetPersonRequest) (*PersonBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPersonManagementServer) List(context.Context, *ListPersonRequest) (*ListPersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPersonManagementServer) Update(context.Context, *UpdatePersonRequest) (*PersonBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPersonManagementServer) Delete(context.Context, *DeletePersonRequest) (*DeletePersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafePersonManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonManagementServer will
// result in compilation errors.
type UnsafePersonManagementServer interface {
	mustEmbedUnimplementedPersonManagementServer()
}

func RegisterPersonManagementServer(s grpc.ServiceRegistrar, srv PersonManagementServer) {
	s.RegisterService(&PersonManagement_ServiceDesc, srv)
}

func _PersonManagement_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonManagementServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PersonManagement/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonManagementServer).Create(ctx, req.(*CreatePersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonManagement_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonManagementServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PersonManagement/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonManagementServer).Get(ctx, req.(*GetPersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonManagement_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonManagementServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PersonManagement/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonManagementServer).List(ctx, req.(*ListPersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonManagement_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonManagementServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PersonManagement/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonManagementServer).Update(ctx, req.(*UpdatePersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonManagement_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonManagementServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PersonManagement/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonManagementServer).Delete(ctx, req.(*DeletePersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PersonManagement_ServiceDesc is the grpc.ServiceDesc for PersonManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PersonManagement",
	HandlerType: (*PersonManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PersonManagement_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PersonManagement_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PersonManagement_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PersonManagement_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PersonManagement_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "person_management_service.proto",
}
